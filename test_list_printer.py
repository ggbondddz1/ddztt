#!/usr/bin/python# -*- coding: UTF-8 -*-import timefrom commonlib.base_lib.mylog.mylog import logimport pytestfrom src.Common_Fun.mythred import exec_threadfrom src.TestCase.RcdcCase.WEB.printer_web.common_printer_web import *from src.TestData.RcdcData.web_erreor_msg.printer_test_data import data_nameclass TestListPrinter(object):    @pytest.mark.publish    @pytest.mark.case_level_0    @pytest.mark.case_type_function    @pytest.mark.parametrize('open_printer_testdata1', ['S', ], indirect=True)    def test_list_printer_01(self, open_printer_testdata1):        """        用例名称:查询已经存在的共享打印机（SHARE），正常返回        接口名称:查询打印机配置        用例作者:        测试点:查询已经存在的共享打印机（SHARE），正常返回        前置步骤:        执行步骤:        校验点:        """        result = common_list_printer(searchkeyword='配置')        printer_web_common_assert(result=result, status="SUCCESS")        for item in result['content']['itemArr']:        #    assert item['printerConnectType'] == 'S'            assert item['configName'].__contains__('配置')        #    assert item['printerModel'] == 'sdf'    @pytest.mark.publish    @pytest.mark.case_level_0    @pytest.mark.case_type_function    @pytest.mark.parametrize('open_printer_testdata1', ['N', ], indirect=True)    def test_list_printer_02(self, open_printer_testdata1):        """        用例名称:查询已经存在的网络打印机（NETWORK），正常返回        接口名称:查询打印机配置        用例作者:        测试点:查询已经存在的网络打印机（NETWORK），正常返回        前置步骤:        执行步骤:        校验点:        """        result = common_list_printer(searchkeyword='配置')        printer_web_common_assert(result=result, status="SUCCESS")        for item in result['content']['itemArr']:            #    assert item['printerConnectType'] == 'N'            assert item['configName'].__contains__('配置')        #    assert item['printerModel'] == 'sdf'    @pytest.mark.publish    @pytest.mark.case_level_0    @pytest.mark.case_type_function    @pytest.mark.parametrize('open_printer_testdata1', ['L', ], indirect=True)    def test_list_printer_03(self, open_printer_testdata1):        """        用例名称:查询已经存在的本地打印机-不共享（LOCAL_UNSHARE），正常返回        接口名称:查询打印机配置        用例作者:        测试点:查询已经存在的本地打印机-不共享（LOCAL_UNSHARE），正常返回        前置步骤:        执行步骤:        校验点:        """        result = common_list_printer(searchkeyword='sdf')        printer_web_common_assert(result=result, status="SUCCESS")        for item in result['content']['itemArr']:            #    assert item['printerConnectType'] == 'L'            #    assert item['configName'] == '配置'            assert item['printerModel'].__contains__('sdf')    @pytest.mark.publish    @pytest.mark.case_level_0    @pytest.mark.case_type_function    @pytest.mark.parametrize('open_printer_testdata1', ['M', ], indirect=True)    def test_list_printer_04(self, open_printer_testdata1):        """        用例名称:查询已经存在的本地打印机-共享（LOCAL_SHARE），正常返回        接口名称:查询打印机配置        用例作者:        测试点:查询已经存在的本地打印机-共享（LOCAL_SHARE），正常返回        前置步骤:        执行步骤:        校验点:        """        result = common_list_printer(searchkeyword='sdf')        printer_web_common_assert(result=result, status="SUCCESS")        for item in result['content']['itemArr']:            #    assert item['printerConnectType'] == 'M'            #    assert item['configName'] == '配置'            assert item['printerModel'].__contains__('sdf')    @pytest.mark.publish    @pytest.mark.case_level_0    @pytest.mark.case_type_function    @pytest.mark.parametrize('open_printer_testdata1', ['S', ], indirect=True)    def test_list_printer_05(self, open_printer_testdata1):        """        用例名称:查询不存在的共享打印机（SHARE），查询失败        接口名称:查询打印机配置        用例作者:        测试点:查询不存在的共享打印机（SHARE），查询失败        前置步骤:        执行步骤:        校验点:        """        result = common_list_printer(searchkeyword='不存在')        printer_web_common_assert(result=result, status="SUCCESS")        for item in result['content']['itemArr']:            #   assert item['printerConnectType'] == None            assert item['configName'] == None            assert item['printerModel'] == None    @pytest.mark.publish    @pytest.mark.case_level_0    @pytest.mark.case_type_function    @pytest.mark.parametrize('open_printer_testdata1', ['N', ], indirect=True)    def test_list_printer_06(self, open_printer_testdata1):        """        用例名称:查询不存在的网络打印机（NETWORK），查询失败        接口名称:查询打印机配置        用例作者:        测试点:查询不存在的网络打印机（NETWORK），查询失败        前置步骤:        执行步骤:        校验点:        """        result = common_list_printer(searchkeyword='不存在')        printer_web_common_assert(result=result, status="SUCCESS")        for item in result['content']['itemArr']:            #   assert item['printerConnectType'] == None            assert item['configName'] == None            assert item['printerModel'] == None    @pytest.mark.publish    @pytest.mark.case_level_0    @pytest.mark.case_type_function    @pytest.mark.parametrize('open_printer_testdata1', ['L', ], indirect=True)    def test_list_printer_07(self, open_printer_testdata1):        """        用例名称:查询不存在的本地打印机-不共享（LOCAL_UNSHARE），查询失败        接口名称:查询打印机配置        用例作者:        测试点:查询不存在的本地打印机-不共享（LOCAL_UNSHARE），查询失败        前置步骤:        执行步骤:        校验点:        """        result = common_list_printer(searchkeyword='不存在')        printer_web_common_assert(result=result, status="SUCCESS")        for item in result['content']['itemArr']:            #   assert item['printerConnectType'] == None            assert item['configName'] == None            assert item['printerModel'] == None    @pytest.mark.publish    @pytest.mark.case_level_0    @pytest.mark.case_type_function    @pytest.mark.parametrize('open_printer_testdata1', ['M', ], indirect=True)    def test_list_printer_08(self, open_printer_testdata1):        """        用例名称:查询不存在的本地打印机-共享（LOCAL_SHARE），查询失败        接口名称:查询打印机配置        用例作者:        测试点:查询不存在的本地打印机-共享（LOCAL_SHARE），查询失败        前置步骤:        执行步骤:        校验点:        """        result = common_list_printer(searchkeyword='不存在')        printer_web_common_assert(result=result, status="SUCCESS")        for item in result['content']['itemArr']:            #    assert item['printerConnectType'] == None            assert item['configName'] == None            assert item['printerModel'] == None    @pytest.mark.publish    @pytest.mark.case_level_0    @pytest.mark.case_type_function    @pytest.mark.parametrize('open_printer_testdata2', ['S', ], indirect=True)    def test_list_printer_09(self, open_printer_testdata2):        """        用例名称:查询被删除的共享打印机（SHARE），查询失败        接口名称:查询打印机配置        用例作者:        测试点:查询被删除的共享打印机（SHARE），查询失败        前置步骤:        执行步骤:        校验点:        """        common_delete_printer(idarr=[open_printer_testdata2], describe='删除打印机配置[{}]成功'.format(data_name))        result = common_list_printer(searchkeyword='配置')        printer_web_common_assert(result=result, status="SUCCESS")        for item in result['content']['itemArr']:            #    assert item['printerConnectType'] == None            assert item['configName'] == None            assert item['printerModel'] == None    @pytest.mark.publish    @pytest.mark.case_level_0    @pytest.mark.case_type_function    @pytest.mark.parametrize('open_printer_testdata2', ['N', ], indirect=True)    def test_list_printer_010(self, open_printer_testdata2):        """        用例名称:查询被删除的网络打印机（NETWORK），查询失败        接口名称:查询打印机配置        用例作者:        测试点:查询被删除的网络打印机（NETWORK），查询失败        前置步骤:        执行步骤:        校验点:        """        common_delete_printer(idarr=[open_printer_testdata2], describe='删除打印机配置[{}]成功'.format(data_name))        result = common_list_printer(searchkeyword='配置')        printer_web_common_assert(result=result, status="SUCCESS")        for item in result['content']['itemArr']:            #    assert item['printerConnectType'] == None            assert item['configName'] == None            assert item['printerModel'] == None    @pytest.mark.publish    @pytest.mark.case_level_0    @pytest.mark.case_type_function    @pytest.mark.parametrize('open_printer_testdata2', ['L', ], indirect=True)    def test_list_printer_011(self, open_printer_testdata2):        """        用例名称:查询被删除的本地打印机-不共享（LOCAL_UNSHARE），查询失败        接口名称:查询打印机配置        用例作者:        测试点:查询被删除的本地打印机-不共享（LOCAL_UNSHARE），查询失败        前置步骤:        执行步骤:        校验点:        """        common_delete_printer(idarr=[open_printer_testdata2], describe='删除打印机配置[{}]成功'.format(data_name))        result = common_list_printer(searchkeyword='配置')        printer_web_common_assert(result=result, status="SUCCESS")        for item in result['content']['itemArr']:            #    assert item['printerConnectType'] == None            assert item['configName'] == None            assert item['printerModel'] == None    @pytest.mark.publish    @pytest.mark.case_level_0    @pytest.mark.case_type_function    @pytest.mark.parametrize('open_printer_testdata2', ['L', ], indirect=True)    def test_list_printer_012(self, open_printer_testdata2):        """        用例名称:查询被删除的本地打印机-共享（LOCAL_SHARE），查询失败        接口名称:查询打印机配置        用例作者:        测试点:查询被删除的本地打印机-共享（LOCAL_SHARE），查询失败        前置步骤:        执行步骤:        校验点:        """        common_delete_printer(idarr=[open_printer_testdata2], describe='删除打印机配置[{}]成功'.format(data_name))        result = common_list_printer(searchkeyword='配置')        printer_web_common_assert(result=result, status="SUCCESS")        for item in result['content']['itemArr']:            #    assert item['printerConnectType'] == None            assert item['configName'] == None            assert item['printerModel'] == None    @pytest.mark.publish    @pytest.mark.case_level_0    @pytest.mark.case_type_function    @pytest.mark.parametrize('open_printer_testdata3', ['S', ], indirect=True)    def test_list_printer_013(self, open_printer_testdata3):        """        用例名称:修改共享打印机（SHARE）信息后查询，返回的查询信息是修改后的信息        接口名称:查询打印机配置        用例作者:        测试点:修改共享打印机（SHARE）信息后查询，返回的查询信息是修改后的信息        前置步骤:        执行步骤:        校验点:        """        common_edit_printer(configname='修改后配置名', configdescription='修改后描述', id=open_printer_testdata3)        result = common_list_printer(searchkeyword='修改后配置名')        printer_web_common_assert(result=result, status="SUCCESS")        for item in result['content']['itemArr']:            #   assert item['printerConnectType'] == 'S'            assert item['configName'].__contains__('修改后配置名')        #    assert item['configDescription'] == '修改后描述'        #    assert item['printerModel'] == 'sdf'    @pytest.mark.publish    @pytest.mark.case_level_0    @pytest.mark.case_type_function    @pytest.mark.parametrize('open_printer_testdata3', ['N', ], indirect=True)    def test_list_printer_014(self, open_printer_testdata3):        """        用例名称:修改网络打印机（NETWORK）信息后查询，返回的查询信息是修改后的信息        接口名称:查询打印机配置        用例作者:        测试点:修改网络打印机（NETWORK）信息后查询，返回的查询信息是修改后的信息        前置步骤:        执行步骤:        校验点:        """        common_edit_printer(configname='修改后配置名', configdescription='修改后描述', id=open_printer_testdata3)        result = common_list_printer(searchkeyword='修改后配置名')        printer_web_common_assert(result=result, status="SUCCESS")        for item in result['content']['itemArr']:            #    assert item['printerConnectType'] == 'N'            assert item['configName'].__contains__('修改后配置名')        #    assert item['configDescription'] == '修改后描述'        #    assert item['printerModel'] == 'sdf'    @pytest.mark.publish    @pytest.mark.case_level_0    @pytest.mark.case_type_function    @pytest.mark.parametrize('open_printer_testdata3', ['L', ], indirect=True)    def test_list_printer_015(self, open_printer_testdata3):        """        用例名称:修改本地打印机-不共享（LOCAL_UNSHARE）信息后查询，返回的查询信息是修改后的信息        接口名称:查询打印机配置        用例作者:        测试点:修改本地打印机-不共享（LOCAL_UNSHARE）信息后查询，返回的查询信息是修改后的信息        前置步骤:        执行步骤:        校验点:        """        common_edit_printer(configname='修改后配置名', configdescription='修改后描述', id=open_printer_testdata3)        result = common_list_printer(searchkeyword='修改后配置名')        printer_web_common_assert(result=result, status="SUCCESS")        for item in result['content']['itemArr']:            #    assert item['printerConnectType'] == 'L'            assert item['configName'].__contains__('修改后配置名')        #    assert item['configDescription'] == '修改后描述'        #    assert item['printerModel'] == 'sdf'    @pytest.mark.publish    @pytest.mark.case_level_0    @pytest.mark.case_type_function    @pytest.mark.parametrize('open_printer_testdata3', ['M', ], indirect=True)    def test_list_printer_016(self, open_printer_testdata3):        """        用例名称:修改本地打印机-共享（LOCAL_SHARE）信息后查询，返回的查询信息是修改后的信息        接口名称:查询打印机配置        用例作者:        测试点:修改本地打印机-共享（LOCAL_SHARE）信息后查询，返回的查询信息是修改后的信息        前置步骤:        执行步骤:        校验点:        """        common_edit_printer(configname='修改后配置名', configdescription='修改后描述', id=open_printer_testdata3)        result = common_list_printer(searchkeyword='修改后配置名')        printer_web_common_assert(result=result, status="SUCCESS")        for item in result['content']['itemArr']:            #    assert item['printerConnectType'] == 'M'            assert item['configName'].__contains__('修改后配置名')        #    assert item['configDescription'] == '修改后描述'        #    assert item['printerModel'] == 'sdf'    # @pytest.mark.unpublish    # @pytest.mark.case_level_0    # @pytest.mark.case_type_function    # def test_list_printer_017(self):    #     """    #     用例名称:删除多条数据包括（共享打印机（SHARE），网络打印机（NETWORK），本地打印机-不共享（LOCAL_UNSHARE），本地打印机-共享（LOCAL_SHARE）），列表减少相应的信息    #     接口名称:查询打印机配置    #     用例作者:    #     测试点:删除多条数据包括（共享打印机（SHARE），网络打印机（NETWORK），本地打印机-不共享（LOCAL_UNSHARE），本地打印机-共享（LOCAL_SHARE）），列表减少相应的信息    #     前置步骤:    #     执行步骤:    #     校验点:    #     """    #     result = common_list_printer()    #     printer_web_common_assert(result=result)    #     已覆盖，test_delete_printer_013    # @pytest.mark.unpublish    # @pytest.mark.case_level_0    # @pytest.mark.case_type_function    # def test_list_printer_018(self):    #     """    #     用例名称:仅删除共享打印机（SHARE）数据，列表减少相应的信息    #     接口名称:查询打印机配置    #     用例作者:    #     测试点:仅删除共享打印机（SHARE）数据，列表减少相应的信息    #     前置步骤:    #     执行步骤:    #     校验点:    #     """    #     result = common_list_printer()    #     printer_web_common_assert(result=result)    #     已覆盖test_list_printer_09    # @pytest.mark.unpublish    # @pytest.mark.case_level_0    # @pytest.mark.case_type_function    # def test_list_printer_019(self):    #     """    #     用例名称:仅删除网络打印机（NETWORK）数据，列表减少相应的信息    #     接口名称:查询打印机配置    #     用例作者:    #     测试点:仅删除网络打印机（NETWORK）数据，列表减少相应的信息    #     前置步骤:    #     执行步骤:    #     校验点:    #     """    #     result = common_list_printer()    #     printer_web_common_assert(result=result)    #     已覆盖test_list_printer_10    # @pytest.mark.unpublish    # @pytest.mark.case_level_0    # @pytest.mark.case_type_function    # def test_list_printer_020(self):    #     """    #     用例名称:仅删除本地打印机-不共享（LOCAL_UNSHARE）数据，列表减少相应的信息    #     接口名称:查询打印机配置    #     用例作者:    #     测试点:仅删除本地打印机-不共享（LOCAL_UNSHARE）数据，列表减少相应的信息    #     前置步骤:    #     执行步骤:    #     校验点:    #     """    #     result = common_list_printer()    #     printer_web_common_assert(result=result)    #     已覆盖test_list_printer_11    # @pytest.mark.unpublish    # @pytest.mark.case_level_0    # @pytest.mark.case_type_function    # def test_list_printer_021(self):    #     """    #     用例名称:仅删除本地打印机-共享（LOCAL_SHARE）数据，列表减少相应的信息    #     接口名称:查询打印机配置    #     用例作者:    #     测试点:仅删除本地打印机-共享（LOCAL_SHARE）数据，列表减少相应的信息    #     前置步骤:    #     执行步骤:    #     校验点:    #     """    #     result = common_list_printer()    #     printer_web_common_assert(result=result)    #     已覆盖test_list_printer_12    # @pytest.mark.unpublish    # @pytest.mark.case_level_0    # @pytest.mark.case_type_function    # def test_list_printer_022(self):    #     """    #     用例名称:打印机配置关闭的情况下，查询共享打印机（SHARE）配置列表，查询失败    #     接口名称:查询打印机配置    #     用例作者:    #     测试点:打印机配置关闭的情况下，查询共享打印机（SHARE）配置列表，查询失败    #     前置步骤:    #     执行步骤:    #     校验点:    #     """    #     common_open_printer(status='true')    #     add_printer(    #         printer_info="'8c122bcb-bba8-4638-9cc7-854496d80d03', 1235466, '阿斯顿法国红酒', 'ddddd3', 't', '配置', 'windows', '点点点', 'SHARE', 'sdf', '十点多', '10', '12.12.12.12', '2020-09-30 14:33:59', '2020-09-30 14:34:03', 1")    #     common_close_printer(status='false')    #     result = common_list_printer(searchkeyword='配置')    #     printer_web_common_assert(result=result, status="SUCCESS")    #     try:    #         for item in result['content']['itemArr']:    #             assert item['printerConnectType'] != 'SHARE'    #    #     finally:    #         common_open_printer(status='true')    #         common_delete_printer(idarr=['8c122bcb-bba8-4638-9cc7-854496d80d03'], describe=ERROER_MSG_01.format(1, 0))    #     打印机配置状态不影响接口调用，用例废弃    # @pytest.mark.unpublish    # @pytest.mark.case_level_0    # @pytest.mark.case_type_function    # def test_list_printer_023(self):    #     """    #     用例名称:打印机配置关闭的情况下，查询网络打印机（NETWORK）配置列表，查询失败    #     接口名称:查询打印机配置    #     用例作者:    #     测试点:打印机配置关闭的情况下，查询网络打印机（NETWORK）配置列表，查询失败    #     前置步骤:    #     执行步骤:    #     校验点:    #     """    #     common_open_printer(status='true')    #     add_printer(    #         printer_info="'8c122bcb-bba8-4638-9cc7-854496d80d03', 1235466, '阿斯顿法国红酒', 'ddddd3', 't', '配置', 'windows', '点点点', 'NETWORK', 'sdf', '十点多', '10', '12.12.12.12', '2020-09-30 14:33:59', '2020-09-30 14:34:03', 1")    #     common_close_printer(status='false')    #     result = common_list_printer(searchkeyword='配置')    #     printer_web_common_assert(result=result, status="SUCCESS")    #     try:    #         for item in result['content']['itemArr']:    #             assert item['printerConnectType'] != 'NETWORK'    #    #     finally:    #         common_open_printer(status='true')    #         common_delete_printer(idarr=['8c122bcb-bba8-4638-9cc7-854496d80d03'], describe=ERROER_MSG_01.format(1, 0))    #     打印机配置状态不影响接口调用，用例废弃    # @pytest.mark.unpublish    # @pytest.mark.case_level_0    # @pytest.mark.case_type_function    # def test_list_printer_024(self):    #     """    #     用例名称:打印机配置关闭的情况下，查询本地打印机-共享（LOCAL_SHARE）配置列表，查询失败    #     接口名称:查询打印机配置    #     用例作者:    #     测试点:打印机配置关闭的情况下，查询本地打印机-共享（LOCAL_SHARE）配置列表，查询失败    #     前置步骤:    #     执行步骤:    #     校验点:    #     """    #     common_open_printer(status='true')    #     add_printer(    #         printer_info="'8c122bcb-bba8-4638-9cc7-854496d80d03', 1235466, '阿斯顿法国红酒', 'ddddd3', 't', '配置', 'windows', '点点点', 'LOCAL_SHARE', 'sdf', '十点多', '10', '12.12.12.12', '2020-09-30 14:33:59', '2020-09-30 14:34:03', 1")    #     common_close_printer(status='false')    #     result = common_list_printer(searchkeyword='配置')    #     printer_web_common_assert(result=result, status="SUCCESS")    #     try:    #         for item in result['content']['itemArr']:    #             assert item['printerConnectType'] != 'LOCAL_SHARE'    #    #     finally:    #         common_open_printer(status='true')    #         common_delete_printer(idarr=['8c122bcb-bba8-4638-9cc7-854496d80d03'], describe=ERROER_MSG_01.format(1, 0))    #     打印机配置状态不影响接口调用，用例废弃    #    # @pytest.mark.unpublish    # @pytest.mark.case_level_0    # @pytest.mark.case_type_function    # def test_list_printer_025(self):    #     """    #     用例名称:打印机配置关闭的情况下，查询本地打印机-不共享（LOCAL_UNSHARE）配置列表，查询失败    #     接口名称:查询打印机配置    #     用例作者:    #     测试点:打印机配置关闭的情况下，查询本地打印机-不共享（LOCAL_UNSHARE）配置列表，查询失败    #     前置步骤:    #     执行步骤:    #     校验点:    #     """    #     common_open_printer(status='true')    #     add_printer(    #         printer_info="'8c122bcb-bba8-4638-9cc7-854496d80d03', 1235466, '阿斯顿法国红酒', 'ddddd3', 't', '配置', 'windows', '点点点', 'LOCAL_UNSHARE', 'sdf', '十点多', '10', '12.12.12.12', '2020-09-30 14:33:59', '2020-09-30 14:34:03', 1")    #     common_close_printer(status='false')    #     result = common_list_printer(searchkeyword='配置')    #     printer_web_common_assert(result=result, status="SUCCESS")    #     try:    #         for item in result['content']['itemArr']:    #             assert item['printerConnectType'] != 'LOCAL_UNSHARE'    #    #     finally:    #         common_open_printer(status='true')    #         common_delete_printer(idarr=['8c122bcb-bba8-4638-9cc7-854496d80d03'], describe=ERROER_MSG_01.format(1, 0))    #     打印机配置状态不影响接口调用，用例废弃    # @pytest.mark.unpublish    # @pytest.mark.case_level_1    # @pytest.mark.case_type_scene    # def test_list_printer_026(self):    #     """    #     用例名称:接口访问是否经过身份认证（即cookie或者证书的认证）    #     接口名称:查询打印机配置    #     用例作者:    #     测试点:接口访问是否经过身份认证（即cookie或者证书的认证）    #     前置步骤:    #     执行步骤:    #     校验点:    #     """    #     result = common_list_printer()    #     printer_web_common_assert(result=result)    # @pytest.mark.unpublish    # @pytest.mark.case_level_1    # @pytest.mark.case_type_scene    # def test_list_printer_027(self):    #     """    #     用例名称:admin用户接口访问成功    #     接口名称:查询打印机配置    #     用例作者:    #     测试点:admin用户接口访问成功    #     前置步骤:    #     执行步骤:    #     校验点:    #     """    #     result = common_list_printer()    #     printer_web_common_assert(result=result)    #     接口未做分级分权，不覆盖    @pytest.mark.publish    @pytest.mark.case_level_2    @pytest.mark.case_type_performance    @pytest.mark.parametrize('open_printer_testdata1', ['S', ], indirect=True)    def test_list_printer_028(self, open_printer_testdata1):        """        用例名称:接口响应时间不超过3秒        接口名称:查询打印机配置        用例作者:        测试点:接口响应时间不超过3秒        前置步骤:        执行步骤:        校验点:        """        result = common_list_printer(searchkeyword='配置')        t1 = time.time()        printer_web_common_assert(result=result, status="SUCCESS")        t2 = time.time()        assert t2 - t1 < 3, '返回时间超过3秒'    @pytest.mark.unpublish    @pytest.mark.case_level_2    @pytest.mark.case_type_performance    @pytest.mark.parametrize('open_printer_testdata1', ['S', ], indirect=True)    def test_list_printer_029(self, open_printer_testdata1):        """        用例名称:并发执行200次        接口名称:查询打印机配置        用例作者:        测试点:并发执行200次        前置步骤:        执行步骤:        校验点:        """        data_list = [['配置'] for i in range(200)]        result_list = exec_thread(common_list_printer, data_list)        for result in result_list:            printer_web_common_assert(result=result, status="SUCCESS")            for item in result['content']['itemArr']:                assert item['configName'].__contains__('配置')